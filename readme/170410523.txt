
This library intends to provide a C++ implementation of the Responsibility Sensitive Safety model (RSS) for Automated Vehicles.
RSS is described in the following paper. Potential users of this C++ library are encouraged to read these papers in order to become familiar with the concepts and functions provided by the library.
The RSS module in this library receives (processed) sensor information as input and provides actuator command restrictions as output. The input to the RSS module is an object list, with information about all objects (road agents) in the surrounding environment of the ego vehicle. For each object, the RSS module creates a description of the object-ego vehicle pair and their properties, called a "situation". For each situation, the relevant RSS safety checks are performed and a proper response is calculated. Finally, one overall response is obtained by combining the responses calculated for each object-ego vehicle situation. The resulting actuation command restrictions, in the form of longitudinal and lateral limits on acceleration are provided as output.
The ad_rss library contains a stand-alone C++ implementation of the RSS module.
The scope, design and architecture of this C++ library for RSS is described in more detail in the following document packaged with this release. This documentation includes guidance on the usage of the RSS library and its integration into a automated driving system. Users of this library are strongly encouraged to read this documentation prior to integration of the library.
When RSS is to be integrated into a larger system it is usually up to the user implementation to provide the required input into RSS based on the environment information available within the system. The ad_rss_map_integration library provides an example C++ implementation for integrating RSS with automated driving maps.
If you use ad-rss-lib for any publication, please cite the IV'2019 paper:
Starting with Release v1.6, it is possible to use the ad-rss-lib library also with Python. Please see the Documentation on the Python binding for ad_rss or ad_rss_map_integration_python for further information.
This library can be used together with the open-source driving simulator CARLA to investigate the behavior of RSS. A first version is shown in the following video sequence:
In addition, the library is already integrated and used in Baidu's Apollo Open Platform stack:

This software library is provided under the LGPL-2.1 open-source license: -2.1.
In addition, the terms in the following apply: RELEASE NOTES AND DISCLAIMERS.
Visit the project's GitHub page to access the online version of the full documentation of this library. This includes:
If you have any additional question not answered therein, you might find more in the FAQ
General release notes and changes can be found in the Changelog
These releases extends the 3.x version with handling of unstructured roads and pedestrians.
These releases improve the 2.x version capabilities on constellation creation.
These releases extend the 1.x version with map integration for extended usability.
The initial release of the C++ software library for RSS implements a subset of the rules and calculations specified in the published RSS paper. This means that this release handles a subset of automated driving scenarios, described below. Scenarios other than this subset cannot be handled.
This release implements the RSS calculations and rules corresponding to the following scenarios:
The following parts of RSS are NOT implemented in this release of the library software:
Note: The RSS module in this library does not initiate evasive manuevers. At the same time, it would not hinder an evasive manuever being executed by the AV driving policy and planning modules, as long as it is compliant with the required RSS proper response.
Currently, the focused operating systems are Ubuntu 16.04 and Ubuntu 18.04. Nevertheless, the library should work in a similar way for any other Linux OS. To install the basic dependencies for Ubuntu 16.04/18.04 execute the following command:
If you want to use doxygen for API documentation, please also install:
To download the library, you may run:
Development systems are Ubuntu 16.04 and Ubuntu 18.04. Following compiler combinations are tested continously:
Important: cmake is required to be at least version 3.5!
See the detailed Build instructions.
Contibutions are very welcome!
Before submitting a pull request, please ensure that your code compiles successfully and that the tests run successfully. Please also check that your code formatting complies to the provided clang style. To do so, you can run:
This command will automatically update the code formatting to be compliant with our style.
In addition, please perform a static code analysis, if possible.
This may provide a list of possible improvements that you would like to consider in your pull request.
On a Formal Model of Safe and Scalable Self-driving Cars, S. Shalev-Shwartz, S. Shammah, A. Shashua, Mobileye, arXiv:1708.06374, 
Conversion of AV sensor data to the input object list required by the RSS module is outside the scope of the ad_rss library. This includes conversion of object location and motion in a Cartesian world coordinate system into a constellation based coordinate system.
Conversion of the output proper response and acceleration restrictions to real AV actuation commands (enforcing the restrictions) is outside the scope of this library. This conversion depends strongly on the software and hardware setup of the actual (or simulated) vehicle.
Doxygen
Background documentation.
Integrate RSS with AD map data and respective Doxygen.
Multi-lane roads, i.e. longitudinal and lateral safe distance and proper response determination; and
Intersections, i.e. two or more routes of different geometry, rules for intersections of routes, with priority/right of way, and longitudinal and lateral proper response determination. However, in the case of intersections, it is assumed that there is always a lateral conflict; and
Unstructured roads and pedestrians.
Occlusions;
Longitudinal or lateral evasive maneuvers as defined by RSS; and
Intersections without a lateral conflict.
C++ Library for Responsibility Sensitive Safety
Table of contents
Introduction
License
Documentation
Releases
Getting started
Building the library
Contributing
Integrating RSS with automated driving maps
Usage of ad-rss-lib
Usage with Python
Usage within CARLA
Usage within Baidu Apollo
Release 4.x.x
Release 3.x.x
Release 2.x.x
Release 1.x.x
Installation of dependencies
Get the library
Supported systems
